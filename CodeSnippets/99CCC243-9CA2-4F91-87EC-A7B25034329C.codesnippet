<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>jw_coredata</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>ClassImplementation</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>#pragma mark - Core Data stack

- (id)init {
    if (self = [super init]) {
        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(save) name:UIApplicationWillTerminateNotification object:nil];
        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(save) name:UIApplicationWillResignActiveNotification object:nil];
    }
    return self;
}

- (bool)save {
	_doutwork()
	NSError *error;
    if (self.managedObjectContext != nil) {
        if ([self.managedObjectContext hasChanges] &amp;&amp; ![self.managedObjectContext save:&amp;error]) {
			// Update to handle the error appropriately.
			dout(@"Unresolved error %@, %@", error, [error userInfo]);
			return NO;
        }
    }
	return YES;
}

- (void)dealloc {
    [[NSNotificationCenter defaultCenter] removeObserver:self];
}

- (NSManagedObjectContext *)managedObjectContext {
    if (_managedObjectContext != nil) {
        return _managedObjectContext;
    }
	
    NSPersistentStoreCoordinator *coordinator = [self persistentStoreCoordinator];
    if (coordinator != nil) {
        _managedObjectContext = [[NSManagedObjectContext alloc] init];
        [_managedObjectContext setPersistentStoreCoordinator:coordinator];
    }
	
    return _managedObjectContext;
}

- (NSManagedObjectModel *)managedObjectModel {
    if (_managedObjectModel != nil) {
        return _managedObjectModel;
    }
    _managedObjectModel = RF_RETAIN([NSManagedObjectModel mergedModelFromBundles:nil]);
    return _managedObjectModel;
}

- (NSPersistentStoreCoordinator *)persistentStoreCoordinator {
	@synchronized (_persistentStoreCoordinator) {
		if (_persistentStoreCoordinator != nil) {
			return _persistentStoreCoordinator;
		}
		
		NSURL *storeUrl = [NSURL fileURLWithPath:[self getStorePath]];
		
		// 数据库存在？
		if (![[NSFileManager defaultManager] fileExistsAtPath:[storeUrl path] isDirectory:NULL]) {
            douts(@"Creat new db")
		}
		
		NSDictionary *options = [NSDictionary dictionaryWithObjectsAndKeys:[NSNumber numberWithBool:YES], NSMigratePersistentStoresAutomaticallyOption, [NSNumber numberWithBool:YES], NSInferMappingModelAutomaticallyOption, nil];
		_persistentStoreCoordinator = [[NSPersistentStoreCoordinator alloc] initWithManagedObjectModel: [self managedObjectModel]];
		
		// 检查可访问状态
		NSError *error = nil;
		if (![_persistentStoreCoordinator addPersistentStoreWithType:NSSQLiteStoreType configuration:nil URL:storeUrl options:options error:&amp;error]) {
			
			NSLog(@"Unresolved error %@, %@", error, [error userInfo]);
			UIAlertView * noStore = [[UIAlertView alloc] initWithTitle:@"存储出错" message:@"可能原因：缓存数据访问出错\n如果重复出现此错误请尝试卸载安装应用后重新安装，给您带来的不便敬请谅解。" delegate:self cancelButtonTitle:nil otherButtonTitles:@"点击退出",nil];
			[noStore show];
            RF_RELEASE_OBJ(noStore)
			return nil;
		}
		
		return _persistentStoreCoordinator;
	}
}

- (NSString *)getStorePath {
	bool isStoreInDocuments = NO;
	NSString * path;
	if (isStoreInDocuments) {
		path = [NSString stringWithFormat:@"%@", [[NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) lastObject] stringByAppendingPathComponent:@"Model.sqlite"]];
	}
	else{
		path = [NSHomeDirectory() stringByAppendingPathComponent:@"Library/Caches/Model.sqlite"];
	}
	douts(path)
	return path;
}</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>99CCC243-9CA2-4F91-87EC-A7B25034329C</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Objective-C</string>
	<key>IDECodeSnippetTitle</key>
	<string>CoreData - 模板</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
